---
title: "TXT_processing"
author: "Simon Oiry"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---


```{r packages}
library(tidyverse)
library(Utilities.Package)
library(patchwork)
library(hsdar)
```

```{r data opening}
filepath <- "Data/Experiment_Intertidal_Chambers/HW3"

if(file.exists(paste0(filepath ,"/Test_and_Control_reflectance.csv") )== F){
  
listfile_control <- list.files(paste0(filepath,"/Control"), recursive = T , full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  mutate(Spectra = gsub(".*/","",path) %>% gsub(".asd.txt","",.))

for (i in 1:nrow(listfile_control)) {
  
  
  a <- read_table(listfile_control$path[i], 
    col_names = FALSE, skip = 4)
  
  b <- read_table(listfile_control$path[i], skip = 35) %>% 
    set_names(c("Wavelength", "Value")) %>% 
    mutate(Spectra = listfile_control$Spectra[i],
           Date = as.character(a[3,3]),
           Time = as.character(a[3,5]),
           IntegrationTime = as.numeric(a[4,4]))
  
  if (i == 1) {
    
    df_control <- b
    
  }else{
    df_control <- rbind(df_control,b)
  }
}

df_control <- df_control %>% 
  mutate(scenario = "Control")

listfile_test <- list.files(paste0(filepath,"/Test"), recursive = T , full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  mutate(Spectra = gsub(".*/","",path) %>% gsub(".asd.txt","",.))

for (i in 1:nrow(listfile_test)) {
  
  
  a <- read_table(listfile_test$path[i], 
    col_names = FALSE, skip = 4)
  
  b <- read_table(listfile_test$path[i], skip = 35) %>% 
    set_names(c("Wavelength", "Value")) %>% 
    mutate(Spectra = listfile_test$Spectra[i],
           Date = as.character(a[3,3]),
           Time = as.character(a[3,5]),
           IntegrationTime = as.numeric(a[4,4]))
  
  if (i == 1) {
    
    df_test <- b
    
  }else{
    df_test <- rbind(df_test,b)
  }
}

df_test <- df_test %>% 
  mutate(scenario = "test")



df <- rbind(df_control,df_test) %>%
    mutate(Time_POS = as.POSIXct(paste0(Date," ", substr(Time,1,5)), format = "%m/%d/%Y %H:%M")) %>%
  mutate(ID = paste0(Spectra, as.character(as.numeric(Time_POS))))

write.csv(df, paste0(filepath ,"/Test_and_Control_reflectance.csv"), row.names = F)
}else{
  
  df <- read.csv(paste0(filepath ,"/Test_and_Control_reflectance.csv"))
}


df <- df  %>%  
  # dplyr::filter(Wavelength %% 2 == 0) %>% 
  group_by(ID) %>% 
  reframe(Wavelength = Wavelength,
          Value = Value,
          Value_mean = c(zoo::rollmean(Value, k=9, fill = NA)),
          Date = Date,
          Time = Time,
          Spectra = Spectra,
          IntegrationTime = IntegrationTime,
          scenario = scenario,
          ID = ID) %>% 
  ungroup() %>% 
  dplyr::filter(!is.na(Value)) %>%  
         # !(scenario == "test" & Spectra %in% c("Heatwave100100","Heatwave100108")),
         # !(scenario == "Control" & Spectra %in% c("Heatwave100089")))%>% 
  mutate(Time_POS = as.POSIXct(paste0(Date," ", substr(Time,1,5)), format = "%m/%d/%Y %H:%M"))%>% 
  dplyr::filter(Wavelength >= 440 & Wavelength <= 990) %>% 
  group_by(Spectra,scenario) %>% 
  mutate(std = (Value_mean-min(Value_mean,na.rm=T))/(max(Value_mean,na.rm=T)-min(Value_mean,na.rm=T))) %>% 
  ungroup() %>% 
  mutate(timeDiff = round(as.numeric(Time_POS - min(Time_POS))/3600),0)

```

```{r ggplot Raw data}

df %>% 
  ggplot() +
  geom_line(aes(x = Wavelength, y = std, group = Spectra, color = Time_POS))+
  facet_wrap(~ scenario)+
  theme_Bede()

```

```{r mean of each scenario}

df %>% 
  filter(Wavelength > 440 & Wavelength < 900) %>% 
  group_by(scenario, Wavelength) %>% 
  reframe(Value = mean(Value, na.rm = T)) %>% 
ggplot(aes(x = Wavelength, y = Value, color = scenario)) +
  geom_line()+
  facet_wrap(~ scenario)+
  theme_Bede()+
  scale_colour_Bede("mixed")

```

```{r Compare NDVI}
NIR_wavelength <- 800  # Exampmple wavelength for NIR
RED_wavelength <- 680 

NDVI <- df %>% 
  ungroup() %>% 
  dplyr::select(-c(Value,Date,Time,IntegrationTime,ID,std)) %>% 
  dplyr::filter(Wavelength %in% c(NIR_wavelength, RED_wavelength)) %>%
  pivot_wider(names_from = Wavelength, values_from = Value_mean) %>%
  group_by(Time_POS,Spectra,scenario) %>% 
  reframe(value = (`800` - `680`) / (`800` + `680`),
          timeDiff = timeDiff)

NDVI %>% 
ggplot(aes(x = Time_POS, y = value, color = scenario)) +
  geom_point(alpha = 0.3)+
  geom_smooth(method = "glm")+
  facet_wrap(~ scenario)+
  theme_Bede()+
  scale_colour_Bede("mixed")

# NDVI %>%
#   ggplot()+
#   geom_boxplot(aes(x = (timeDiff), y = value, color = scenario, group = interaction(timeDiff,scenario)))+
#   annotate("rect", xmin = missing_start, xmax = missing_end, ymin = -Inf, ymax = Inf,
#            alpha = 0.2, fill = "grey")
  
```

```{r Compare Slope}
Wv1 <- 750  # Example wavelength for NIR
Wv2 <- 900

Slope <- df %>% 
    dplyr::filter(Wavelength %in% c(Wv1, Wv2, 650)) %>%
    dplyr::select(-c(Value,Date,Time,IntegrationTime,ID,std)) %>% 
    pivot_wider(names_from = Wavelength, values_from = Value_mean) %>%
    group_by(Time_POS,scenario) %>% 
    reframe(value = ((`900`-`750`)/(900-750)))

Slope %>% 
ggplot(aes(x = Time_POS, y = value, color = scenario)) +
  geom_point()+
  geom_smooth(method = "glm")+
  facet_wrap(~ scenario)+
  theme_Bede()+
  scale_colour_Bede("mixed")
```

```{r Water Absorption}

Water_abs <- df %>% 
  dplyr::filter(Wavelength %in% c(930,960,990,950,970)) %>%
  dplyr::select(-c(Value,Time,IntegrationTime,ID,Value_mean)) %>% 
  pivot_wider(names_from = Wavelength, values_from = std) %>%
  group_by(scenario, Spectra, Time_POS) %>% 
  reframe(a = (`990`-`930`)/60,
         b = (16.5*`930`)-(15.5*`990`),
         abs_water = a * `960` + b,
         abs_water2 = (0.5*(`990`+`950`))-`970`,
         Date = Date)

Water_abs %>% 
  ggplot(aes(x = Time_POS, y = abs_water2, color = scenario))+
  geom_point(alpha = 0.3)+
    # geom_boxplot(aes(group = interaction(Date,scenario)))+
  geom_smooth(aes(group = interaction(Date,scenario)), method = "glm" )+
    geom_smooth( method = "glm" )+
  
  ylab("Moisture Stress Index")+
  theme_Bede()+
  scale_colour_Bede("mixed")
  # facet_wrap(~scenario)
```

```{r Water content and NDVI}
df_NDVI <- NDVI %>% 
  dplyr::select(-scenario) %>% 
  rename(NDVI = "value")

df_coeffect <- Water_abs %>% 
  dplyr::select(c(Time_POS,Spectra,scenario,abs_water,abs_water2)) %>% 
  # mutate(abs_water = ((max(abs_water)- abs_water)/(max(abs_water)-min(abs_water)))) %>% 
  left_join(df_NDVI, by = c("Time_POS","Spectra")) %>% 
  mutate(residual =  lm(NDVI ~ abs_water2) %>% residuals())


df_coeffect %>% 
  ggplot(aes(x = Time_POS, y =residual,color = scenario))+
  geom_point(alpha = 0.3)+
  geom_smooth(method = "glm")+
  facet_wrap(~scenario)+
  theme_Bede()+
  scale_colour_Bede("mixed")
# 
# df_coeffect %>% 
#   ggplot(aes(x = NDVI, y =abs_water2,color = scenario))+
#   geom_point(alpha = 0.3)+
#   geom_smooth(method = "glm")+
#   facet_wrap(~scenario,scales = "free")+
#   theme_Bede()+
#   scale_colour_Bede("mixed")

```

```{r 2nd derivative}

spectra <- df %>% 
  ungroup() %>%   
  dplyr::select(std,ID,Wavelength) %>%
  # dplyr::filter(Wavelength >= 450 & Wavelength <= 900) %>% 
  pivot_wider(names_from = ID, values_from = std) %>% 
  dplyr::select(-Wavelength)

wavelength <- seq(from = 440, to = 990,by = 1)

deriv <- speclib(spectra = as.matrix(spectra), wavelength = wavelength) %>% 
  noiseFiltering(method = "sgolay", n =15) %>%
  derivative.speclib(m=1) %>% 
  noiseFiltering(method = "sgolay", n =15) %>%
  derivative.speclib(m=1)  %>%
  noiseFiltering(method = "sgolay", n =15) %>%
  # derivative.speclib(m=1) %>% 
  # noiseFiltering(method = "sgolay", n =15) %>%
  # derivative.speclib(m=1) %>% 
  spectra() %>% 
  t()%>% 
  as_tibble()
  
 

names(deriv) <- names(spectra)

deriv <- deriv %>% 
  mutate(wavelength = wavelength-14)

deriv_long <- deriv %>% 
  dplyr::mutate(Wavelength = wavelength) %>% 
  pivot_longer(-Wavelength, names_to = "ID", values_to = "Deriv") %>% 
  dplyr::filter(Wavelength >= 440 & Wavelength <= 900) %>% 
  left_join(df,by = c("Wavelength","ID"))



# deriv_long %>% 
#   ggplot(aes(x = Wavelength, y = Deriv, color = Time_POS, group = Spectra))+
#   geom_line()+
#   facet_wrap(~ scenario)

deriv_plot <- deriv_long %>%
  dplyr::filter(scenario == "test") %>%
  dplyr::filter(ID == unique(ID)[100]) %>% 
  # mutate(Deriv = c(zoo::rollmean(Deriv, k=10, fill = NA))) %>% 
  ggplot(aes(x = Wavelength, y = Deriv))+
  geom_line()+
  geom_vline(xintercept = 655, color = "red")+
  geom_vline(xintercept = 676, color = "blue")+
  geom_vline(xintercept = 605, color = "green")+
  geom_vline(xintercept = 575, color = "goldenrod")+
  geom_vline(xintercept = 525, color = "darkred")+



  # geom_smooth(method = "loess")+
  theme_Bede()

sp <- deriv_long %>% 
  dplyr::filter(scenario == "test") %>% 
  dplyr::filter(ID == unique(ID)[1]) %>% 
  ggplot(aes(x = Wavelength, y = Value_mean))+
  geom_line()+
  ylim(c(0,0.3))+
  theme_Bede()

deriv_plot + sp

```


```{r Raw vs Cleaned}

spectra <- df %>% 
  dplyr::select(Value_mean,ID,Wavelength) %>%
  dplyr::filter(Wavelength >= 450 & Wavelength <= 900) %>% 
  pivot_wider(names_from = ID, values_from = Value_mean) %>% 
  dplyr::select(-Wavelength)

wavelength <- seq(from = 450, to = 900,by = 1)

sp_cleaned <- speclib(spectra = as.matrix(spectra), wavelength = wavelength) %>% 
  noiseFiltering(method = "sgolay", n =5) %>%
  # derivative.speclib(m=2, method = "finApprox") %>% 
  spectra() %>% 
  t()%>% 
  as_tibble() 
 

names(sp_cleaned) <- names(spectra)


Cleaned_long <- sp_cleaned %>% 
  dplyr::mutate(Wavelength = wavelength-15) %>% 
  pivot_longer(-Wavelength, names_to = "ID", values_to = "Value_cleaned") %>% 
  left_join(df,by = c("Wavelength","ID"))


Cleaned_long %>%
  dplyr::filter(scenario == "test") %>%
  dplyr::filter(ID == unique(ID)[100]) %>% 
ggplot(aes(x = Wavelength))+
  geom_line(aes(y = Value), color = "red")+
  geom_line(aes(y = Value_cleaned), color = "blue")


```


```{r check abs}

deriv_long %>% 
    dplyr::select(-c(Value,Date,Time,IntegrationTime,Value_mean,ID,std)) %>%
  dplyr::filter(Wavelength == 676 |
                Wavelength == 655) %>%
  pivot_wider(names_from = Wavelength, values_from = Deriv) %>%
  mutate(abs_ratio = `655`/`676`) %>% 
  ggplot(aes(x = Time_POS, y = `676`, color = scenario))+
  ylab("Hauteur du Pic")+
  geom_point(alpha = 0.3)+
  # geom_boxplot(aes(group = interaction(Date,scenario)))+
  geom_smooth(method = "glm")


deriv_long %>% 
    dplyr::select(-c(Value,Date,Time,IntegrationTime,Value_mean,ID,std)) %>%
  dplyr::filter(Wavelength == 676,
                !is.na(timeDiff)) %>%
  pivot_wider(names_from = Wavelength, values_from = Deriv) %>%
  ggplot(aes(x = as.factor(timeDiff), y = `676`, color = scenario, group = interaction(scenario, timeDiff)))+
  ylab("Hauteur du Pic")+
  ylim(c(0,0.002))+
  geom_boxplot()
```

```{r sd_derivative}

deriv_long %>% 
  dplyr::filter(Wavelength < 700) %>% 
  group_by(Wavelength,scenario) %>% 
  reframe(sd = sd(Deriv, na.rm = T),
          diff = max(Deriv,na.rm = T)-min(Deriv,na.rm=T)) %>% 
  ggplot(aes(x = Wavelength-4, y = diff, color = scenario))+
  geom_line(alpha=0.3)+
  # geom_vline(xintercept = 655, color = "red")+
  geom_vline(xintercept = 676, color = "blue")+
  # geom_vline(xintercept = 602, color = "green")+
  # geom_vline(xintercept = 628, color = "goldenrod")+
  # geom_vline(xintercept = 493, color = "darkred")+
  geom_smooth(method="gam")+
  theme_Bede()+
  scale_colour_Bede("mixed")

  # facet_wrap(~ scenario)

```

```{r Green leaf index}

green_wavelength <- 550  # Example wavelength for NIR
RED_wavelength <- 680 
Blue_wavelength <- 450

GLI <- df %>% 
  ungroup() %>% 
  dplyr::select(-c(Value,Date,Time,IntegrationTime,ID,std)) %>% 
  dplyr::filter(Wavelength %in% c(green_wavelength, RED_wavelength,Blue_wavelength)) %>%
  pivot_wider(names_from = Wavelength, values_from = Value_mean) %>%
  group_by(Time_POS,Spectra,scenario) %>% 
  reframe(value = (2*`550`-`680`-`450`) / (2*`550`+`680`+`450`))

GLI %>% 
ggplot(aes(x = Time_POS, y = value, color = scenario)) +
  geom_point(alpha = 0.3)+
  geom_smooth(method = "glm")+
  facet_wrap(~ scenario)+
  ylab("Green Leaf Index")+
  xlab("Time")+
  theme_Bede()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  scale_colour_Bede("mixed")


```


