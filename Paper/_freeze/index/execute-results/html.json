{
  "hash": "92e30095519e6f94fec42d67e3e00c7b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Draft -- Effect of Atmospheric Heatwaves on Reflectance and Pigment Composition of Intertidal *Nanozostera noltei*  -- Draft\nauthor:\n  - name: Simon Oiry\n    orcid: 0000-0001-7161-5246\n    corresponding: true\n    email: oirysimon@gmail.com\n    roles:\n      - Investigation\n      - Writing\n      - Data acquisition\n    affiliations:\n      - Institut des Substances et Organismes de la Mer, ISOMer, Nantes Université, UR 2160, F-44000 Nantes, France\n  - name: Bede Ffinian Rowe Davies\n    corresponding: false\n    roles: \n      - Investigation\n      - Data acquisition\n      - Revision\n    affiliations:\n      - Institut des Substances et Organismes de la Mer, ISOMer, Nantes Université, UR 2160, F-44000 Nantes, France\n  - name: Philippe Rosa\n    corresponding: false\n    roles: \n      - Data acquisition\n      - Revision\n    affiliations:\n      - Institut des Substances et Organismes de la Mer, ISOMer, Nantes Université, UR 2160, F-44000 Nantes, France\n  - name: Augustin Debly\n    corresponding: false\n    roles: \n      - Investigation\n      - Data acquisition\n      - Revision\n    affiliations:\n      - Institut des Substances et Organismes de la Mer, ISOMer, Nantes Université, UR 2160, F-44000 Nantes, France\n  - name: Anne-Laure Barillé\n    corresponding: false\n    roles: \n      - Investigation\n      - Data acquisition\n      - Revision\n    affiliations:\n      - Bio-littoral, Immeuble Le Nevada, 2 Rue du Château de l'Eraudière, 44300 Nantes, France\n  - name: Nicolas Harrin\n    corresponding: false\n    roles: \n      - Investigation\n      - Data acquisition\n      - Revision\n    affiliations:\n      - Bio-littoral, Immeuble Le Nevada, 2 Rue du Château de l'Eraudière, 44300 Nantes, France\n  - name: Pierre Gernez\n    corresponding: false\n    roles: \n      - Investigation\n      - Data acquisition\n      - Revision\n    affiliations:\n      - Institut des Substances et Organismes de la Mer, ISOMer, Nantes Université, UR 2160, F-44000 Nantes, France\n  - name: Laurent Barillé\n    corresponding: false\n    roles: \n      - Investigation\n      - Data acquisition\n      - Revision\n    affiliations:\n      - Institut des Substances et Organismes de la Mer, ISOMer, Nantes Université, UR 2160, F-44000 Nantes, France\nkeywords:\n  - Remote Sensing\n  - Pigment Composition\n  - Seagrass\n  - Coastal Ecosystems\n  - Heatwaves \nabstract: |\n  To be written\nplain-language-summary: |\n  To be written\nkey-points:\n  - An intertidal vegetation classifier has been built to be used across different study sites without losing classification accuracy. \n  - Neural Network made to accuratly discriminates intertidal seagrasses from green algae (chlorophyceae)\ndate: last-modified\ncitation:\n  container-title: Remote Sensing of Environment\nnumber-sections: true\nnotebook-links: false\neditor_options: \n  chunk_output_type: console\ncsl: RSE.csl\n---\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n\n# Introduction\n\nIntertidal seagrasses play a crucial role in the ecosystem by providing habitats and feeding grounds for various marine species, supporting rich marine biodiversity, and contributing significantly to primary production and carbon sequestration [@unsworth2022planetary ; @sousa2019blue]. These seagrasses are essential in maintaining the health of coastal ecosystems by stabilizing sediments, filtering water, and serving as indicators of environmental changes due to their sensitivity to water quality variations [@zoffoli2021decadal]. The interactions between seagrass meadows and their associated herbivores further enhance the delivery of ecosystem services, including coastal protection and fisheries support [@jankowska2019stabilizing ; @zoffoli2023remote ; @gardner2018global]. Understanding and preserving these ecosystems are vital for maintaining the biodiversity and productivity of coastal regions [@scott2018role ; @ramesh2020seagrass].\n\nDespite their crucial role in marine ecosystems, intertidal seagrasses face numerous threats that compromise their health and functionality. Coastal development and human activities are primary threats. These activities not only reduce the available habitat for seagrasses but also increase water turbidity, which limits light penetration and hampers photosynthesis [@waycott2009accelerating]. Seagrasses are also threatened by nutrient enrichment from agricultural and urban runoff, which can lead to eutrophication. This condition promotes the overgrowth of algal blooms that compete with seagrasses for light and nutrients, further stressing these important plants [@thomsen2023meadow] (Oiry et al. 2024). Pollution from industrial and agricultural fields sources introduces harmful chemicals and heavy metals into coastal waters, posing toxic risks to seagrass health. These pollutants can affect the physiological processes of seagrasses, reducing their growth and survival rates [@sevgi2022bitkilerde] Additionally, invasive species can out compete native seagrasses for resources, altering community structure and function [@simpson2016distribution].\n\nHeatwaves, exacerbated by climate change, pose a growing threat to seagrasses. Marine Heatwaves (MHW), defined by @hobday2016hierarchical as prolonged discrete anomalously warm water events, and Atmospheric Heatwaves (AHW), defined by @perkins2013measurement as periods of at least three consecutive days with temperatures exceeding the 90th percentile, cause severe physiological stress on seagrasses [@sawall2021chronically; @deguette2022physiological]. At the interface between the land and oceans, intertidal seagrasses are exposed to both MHW and AHW. Heatwaves have profound impacts on seagrasses, with their effects varying based on species and geographic location. For instance, the seagrass *Zostera marina* exhibits high susceptibility to elevated sea surface temperatures during winter and spring, leading to advanced flowering, high mortality rates, and reduced biomass [@sawall2021chronically]. Similarly, *Cymodocea nodosa* shows increased photosynthetic activity during heatwaves but suffers negative effects on photosynthetic performance and leaf biomass during recovery [@deguette2022physiological]. Additionally, different populations of *Zostera marina* along the European thermal gradient exhibit varied photophysiological responses during the recovery phase of heatwaves, indicating differential adaptation capabilities among populations [@winters2011effects]. These events intensify other stressors, such as overgrazing and seed burial, compromising sexual recruitment [@guerrero2020heat].\n\nBleaching and darkening events of seagrass beds have been observed following episodes of intense heat along the Brittany coast of France (Pers. obs.) then affecting leaf color, which are expected to alter leaf reflectance. Remote sensing is increasingly being utilized to monitor marine ecosystems, including seagrass meadows. By using spectral indices, such as the Normalized Difference Vegetation Index (NDVI) and the Soil-Adjusted Vegetation Index (SAVI), or by analyzing specific spectral patterns, remote sensing can effectively quantify vegetation health over time [@huete2012vegetation ; @kloos2021agricultural ; @carlan2020identifying ; @akbar2020mangrove]. Through the Water Framework Directive and the Marine Strategy Framework Directive, Europe is promoting remote sensing techniques for habitat mapping, as these methods enable the monitoring of extensive areas over time [@papathanasopoulou2019satellite]. This study will experimentally test the hypothesis that warm events modify the pigment composition and reflectance of seagrass, linking these changes with satellite remote sensing.\n\n# Material & Methods\n\n## *in situ* observation of seagrass leaves darkening.\n\n### Field campaign\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(tidyverse)\nlibrary(exiftoolr)\nlibrary(shiny)\n\nimage_list <- list.files(\"Data/Biolittoral/Bio-Littoral_Drone/OFB2021_Quadrat_Zost_QBR\", recursive = T, full.names = T) %>% \n  as_tibble() %>% \n  dplyr::rename(path = \"value\") %>% \n  dplyr::mutate(filename = gsub(\".*/\",\"\",path),\n                lat = NA,\n                lon=NA) %>% \n  dplyr::filter(str_detect(path,\"Quadrats\"))\n\n\n  for (i in 1:nrow(image_list)) {\n    a <- exiftoolr::exif_read(image_list$path[i])\n    \n    lat_a <- a$GPSLatitude\n    lon_B <- a$GPSLongitude\n    \n    image_list$lat[i] <- lat_a\n    image_list$lon[i] <- lon_B\n  } \n \n if (!\"Target_types\" %in% colnames(image_list)) {\n  image_list$Target_types <- NA\n}\n\nui <- fluidPage(\n  titlePanel(\"Image Annotation App\"),\n  sidebarLayout(\n    sidebarPanel(\n      uiOutput(\"category_ui\"),\n      textInput(\"new_category\", \"Add New Category\"),\n      actionButton(\"add_category_btn\", \"Add Category\"),\n      actionButton(\"next_btn\", \"Next Image\")\n    ),\n    mainPanel(\n      imageOutput(\"image_display\", width = \"900px\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  # Reactive value to keep track of the current image index\n  current_index <- reactiveVal(1)\n  \n  # ReactiveValues to store categories\n  rv <- reactiveValues(categories = character())\n  \n  # Display the current image\n  output$image_display <- renderImage({\n    # Get the current image path\n    img_path <- image_list$path[current_index()]\n    \n    # Check if the image file exists\n    if (file.exists(img_path)) {\n      list(src = img_path, contentType = 'image/jpeg', style = \"width:100%; height:auto;\", alt = \"Image\")\n    } else {\n      list(src = \"https://via.placeholder.com/400x300?text=Image+Not+Found\", contentType = 'image/png', alt = \"Image Not Found\")\n    }\n  }, deleteFile = FALSE)\n  \n  # Generate the UI for categories\n  output$category_ui <- renderUI({\n    if (length(rv$categories) > 0) {\n      checkboxGroupInput(\"selected_categories\", \"Select Categories:\", choices = rv$categories)\n    } else {\n      tags$p(\"No categories available. Please add a new category.\")\n    }\n  })\n  \n  # Add new category\n  observeEvent(input$add_category_btn, {\n    new_cat <- input$new_category\n    if (!is.null(new_cat) && new_cat != \"\") {\n      rv$categories <- unique(c(rv$categories, new_cat))\n      updateTextInput(session, \"new_category\", value = \"\")\n    }\n  })\n  \n  # Next button logic\n  observeEvent(input$next_btn, {\n    # Get selected categories\n    selected_cats <- input$selected_categories\n    if (is.null(selected_cats)) {\n      selected_cats <- NA\n    } else {\n      selected_cats <- paste(selected_cats, collapse = \", \")\n    }\n    \n    # Save the selected categories to 'Target_types' column\n    image_list$Target_types[current_index()] <<- selected_cats\n    \n    # Move to next image\n    if (current_index() < nrow(image_list)) {\n      current_index(current_index() + 1)\n      \n      # Reset the selected categories input\n      updateCheckboxGroupInput(session, \"selected_categories\", selected = character(0))\n    } else {\n      showModal(modalDialog(\n        title = \"End of Images\",\n        \"You have reached the end of the images.\",\n        easyClose = TRUE\n      ))\n    }\n  })\n}\n\nshinyApp(ui = ui, server = server)\n \nwrite.csv(image_list, \"Data/Biolittoral/Bio-Littoral_Drone/Quadrat_metadata.csv\", row.names = F)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nimage_list <- read.csv(\"../Data/Biolittoral/Bio-Littoral_Drone/Quadrat_metadata.csv\") %>% \n    as_tibble()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(terra)\nlibrary(MapRs)\nlibrary(nngeo)\nlibrary(smoothr)\nlibrary(rnaturalearth) \nlibrary(rnaturalearthdata) \n\nquadrat_sf <- image_list %>% \n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326) %>% \n  mutate(Target_types = case_when(str_detect(Target_types,\"Mix\") ~ \"Other\",\n                                  str_detect(Target_types,\"Healthy\") ~ \"Healthy_seagrass\",\n                                  str_detect(Target_types,\"Bleached\") ~ \"Bleached_seagrass\",\n                                  T ~ \"Other\")) %>% \n  dplyr::filter(Target_types %in% c(\"Bleached_seagrass\",\"Healthy_seagrass\"))# Assuming your data is in WGS84 (EPSG: 4326)\n\n\nDrone_flight_area <- \"Data/shp/Flight_area_drone.shp\" %>% \n  read_sf()\n######  Intertidal mask computing ######\n\nlon_min <- -3.15\nlon_max <- -3.07\nlat_min <- 47.54\nlat_max <- 47.6\n\npoly <- data.frame(\n  x = c(lon_min,lon_max,lon_max,lon_min),\n  y = c(lat_max,lat_max,lat_min,lat_min),\n  id = c(1,1,1,1)\n)\n\n\n# Ensure the polygon is closed by adding the first point at the end if necessary\nif (!all(poly[1, c(\"x\", \"y\")] == poly[nrow(poly), c(\"x\", \"y\")])) {\n  poly <- rbind(poly, poly[1, ])\n}\n\n# Create a matrix of coordinates\ncoords <- as.matrix(poly[, c(\"x\", \"y\")])\n\n# Create a list of coordinate matrices (required by st_polygon)\npolygon_list <- list(coords)\n\n# Create an 'sfc' (simple features geometry list column) object with the appropriate CRS\npolygon_sfc <- st_sfc(st_polygon(polygon_list), crs = 4326) %>% \n  st_transform(32630)\n  # CRS 4326 corresponds to WGS84\n\n# Combine the 'id' with the geometry to create an 'sf' object\npoly_sf <- st_sf(id = unique(poly$id), geometry = polygon_sfc)\n\n\nLow_Tide <- \"Data/Sentinel2/S2B_MSIL2A_20230903T110629_N0509_R137_T30TVT_20230903T125637.SAFE\" %>% \n  list.files(pattern = \".jp2\", recursive = T, full.names = T) %>% \n  as_tibble() %>% \n  rename(path = \"value\") %>% \n  dplyr::filter(str_detect(path, \"10m\"))\n\nHigh_Tide <- \"Data/Sentinel2/S2B_MSIL2A_20240503T112119_N0510_R037_T30TVT_20240503T130006.SAFE\" %>% \n  list.files(pattern = \".jp2\", recursive = T, full.names = T) %>% \n  as_tibble() %>% \n  rename(path = \"value\") %>% \n  dplyr::filter(str_detect(path, \"10m\"))\n\nRGB_High <- rast(High_Tide$path[6]) %>% \n  crop(poly_sf)\nRGB_Low <- rast(Low_Tide$path[6]) %>% \n  crop(poly_sf)\n\nRGB(RGB_High) <- 1:3\nRGB(RGB_Low) <- 1:3\n\nNDVI_comp <- function(df,mask){\n  \n  B4 <- (rast(df$path[4])-1000) %>% \n    crop(mask)\n  B8 <- (rast(df$path[5])-1000) %>% \n    crop(mask)\n  \n  ndvi = (B8-B4)/(B8+B4)\n  return(ndvi)\n}\n\n NDVI_High<- NDVI_comp(High_Tide,poly_sf)\n NDVI_Low<- NDVI_comp(Low_Tide,poly_sf)\n \n \nint_mask <- NDVI_High < -0.05 & NDVI_Low > 0.05\n\nvalues(int_mask)[values(int_mask) == F] <- NA\n\nmask_sf <- as.polygons(int_mask) %>% \n  st_as_sf() %>% \n  st_cast(\"POLYGON\") %>% \n  mutate(area = st_area(geometry)) %>% \n  dplyr::filter(as.numeric(area) > 6500) %>% \n  nngeo::st_remove_holes() %>% \n  smoothr::smooth(method = \"ksmooth\", smoothness = 3)\n  \nplot(mask_sf)\n\n\n########## Geomgrob ##################\"\n\nsovereignty10 <- ne_countries(scale = 10, returnclass = \"sf\")\n\nworld_map <- sovereignty10 %>% \n  st_as_sf() %>% \n  dplyr::filter(sovereignt%in%c(\"Spain\",\"France\",\"Portugal\",\n                                \"Italy\",\"Andorra\",\n                                \"United Kingdom\",\n                                \"Switzerland\",\"Belgium\",\n                                \"Germany\",\"Luxembourg\") ) \n\nbbox_europe <- st_bbox(c(xmin = -20, ymin = 34,\n                         xmax = 20, ymax = 55) ,\n                       crs = st_crs(world_map) ) \n\nworld_map<-st_make_valid(world_map) \n\neuropean_union_map_cropped <- st_crop(world_map, bbox_europe)  %>% \n  st_transform(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs \")  \n\n\nUnitedKingdom<-sovereignty10 %>% \n  st_as_sf() %>% \n  dplyr::filter(sovereignt%in%c(\"United Kingdom\") ) %>% \n  st_cast(\"POLYGON\") \n\nbbox_UK <- st_bbox(c(xmin = -20, ymin = 45,\n                         xmax = 20, ymax = 55) ,\n                       crs = st_crs(UnitedKingdom) ) \n\nUnitedKingdom<-st_make_valid(UnitedKingdom) \n\nUK_map_cropped <- st_crop(UnitedKingdom, bbox_UK)  %>% \n  st_transform(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs \") \n\nEurope_sf<-european_union_map_cropped %>% \n  dplyr::bind_rows(UK_map_cropped) \n\nMiniworld_map <- sovereignty10 %>% \n  st_as_sf()\n\nsf_use_s2(FALSE)\n\nbbox_EU <- st_bbox(c(xmin = -30, ymin = 20,\n                         xmax = 50, ymax = 70) ,\n                       crs = st_crs(Miniworld_map) ) \n\nMiniEU_map<-st_crop(Miniworld_map, bbox_EU)  %>% \n  st_transform(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs \")  \n\n\nscaleFUN <- function(x) paste0(sprintf(\"%.2f\", x),\"°N\")\n  \nQuiberon_Location <- data.frame(\n  lon = mean(c(lon_max,lon_min)),\n  lat = mean(c(lat_max,lat_min)),\n  ID = \"Quiberon\",\n  Site = \" baie de Plouharnel\"\n) %>% \n  st_as_sf(coords=c(\"lon\",\"lat\") )  %>% \n  st_set_crs(\"EPSG:4326\") %>% \n  st_transform(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs \")  %>% \n  dplyr::mutate(lon = sf::st_coordinates(.) [,1],\n                lat = sf::st_coordinates(.) [,2]) %>% \n  sf::st_set_geometry(NULL)\n\n\np1  <-\n  ggplot(MiniEU_map) +\n  geom_sf(linewidth=0.5,alpha=0.93,\n          fill=\"#CFCFCF\",colour=\"grey30\")+\n    ggforce::geom_mark_ellipse(data=Quiberon_Location,\n                 aes(x=lon,\n                     y=lat,\n                     label = ID\n                     # description=Site\n                     ) ,\n                 linewidth=0.2,\n                 fill=\"goldenrod\",\n                 show.legend=F,\n                 label.hjust = 0.3,\n                 con.size = 1,\n                 con.colour = \"goldenrod4\",\n                 label.fontsize = c(12),\n                 alpha=0.8,\n                 expand = unit(1.5, \"mm\") , \n                 radius = unit(1.5, \"mm\") , \n                 label.buffer = unit(4, \"mm\") ,\n                 label.fill = \"grey90\")+\n  coord_sf(xlim=c(2600000,4100000) ,\n          ylim=c(1600000,3100000))+\n  theme_Bede_Map()+\n  labs(x=\"Longitude\",\n       y=\"Latitude\")+\n  scale_y_continuous(labels=scaleFUN)+\n  # theme(plot.margin = unit(c(0.0,0.0,0.0,0.0), \"cm\"),\n  #       axis.title = element_blank(),\n  #       axis.ticks = element_blank(),\n  #       panel.grid.major = element_blank(),\n  #       # axis.text.x = element_text(size = 20),\n  #       # axis.text.y = element_text(size = 20) \n  #       axis.text.x = element_blank(),\n  #       axis.text.y = element_blank() \n  #       )+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"slategray3\"))\n\ncol_sf <- c(\"Bleached_seagrass\" = \"darkred\", \n            \"Healthy_seagrass\" = \"darkgreen\"\n            # \"Other\" = \"grey\"\n            )\n\n# Extract x and y ranges\nxlim <- c(lon_min, lon_max)\nylim <- c(lat_min, lat_max)\n\n# Compute the coordinates for the rectangle (25% to 75% of the ranges)\nxleft   <- xlim[1] + 0.745 * diff(xlim)\nxright  <- xlim[1] + 0.99 * diff(xlim)\nybottom <- ylim[1] + 0.854 * diff(ylim)\nytop    <- ylim[1] + 0.975 * diff(ylim)\n\n# Create a rectangle as an sf polygon\nrectangle_coords <- matrix(c(\n  xleft,  ybottom,\n  xleft,  ytop,\n  xright, ytop,\n  xright, ybottom,\n  xleft,  ybottom  # Close the polygon by repeating the first point\n), ncol = 2, byrow = TRUE)\n\nrectangle_sf <- st_polygon(list(rectangle_coords)) %>%\n  st_sfc(crs = st_crs(\"EPSG:4326\")) %>%\n    st_transform(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs \") %>%\n  st_sf()\n\n\np2 <- ggplot() +\n  tidyterra::geom_spatraster_rgb(data = RGB_Low) +\n  geom_sf(data = mask_sf, aes(fill = \"Mask\"), color = \"grey20\", linewidth = 0.5) +\n  geom_sf(data = Drone_flight_area, aes(fill = \"Drone_Flight_Area\"), color = \"grey0\", size = 2.2, linewidth = 0.5) +\n  geom_sf(data = quadrat_sf, aes(color = Target_types), size = 2.1)+\n  geom_sf(data = rectangle_sf, fill = \"white\", alpha = 0.5, color = NA) +\n  scale_color_manual(\n    values = col_sf,\n    labels = c(\"Blackened seagrasses\", \"Healthy seagrasses\", \"Other\"),\n    name = NULL\n  ) +\n  scale_fill_manual(\n    values = c(\"Mask\" = \"grey90\", \"Drone_Flight_Area\" = \"grey70\"),\n    labels = c(\"Drone Flight\", \"Intertidal area\"),\n    name = NULL  # No title for the fill legend\n  ) +\n  coord_sf(expand = F) +\n  theme_Bede_Map() +\n  guides(\n    fill = guide_legend(order = 2),  # Order the fill legend\n    color = guide_legend(order = 1)  # Order the color legend\n  ) +\n  labs(fill = NULL, colour = NULL)+\n  theme(\n    legend.background = element_rect(fill = alpha(\"white\", 0)),\n    legend.box = \"vertical\",  # Stack legends vertically\n    legend.box.just = \"left\",  # Align the legends to the left\n    legend.spacing.y = unit(0.0, 'mm'),  # Adjust the spacing between items\n    legend.key = element_rect(fill = \"white\", color = \"black\"),  # Ensure clear legend keys\n    legend.box.margin = margin(5, 5, 5, 5)\n    )  # Adjust position if needed  )\n\n# p2\n\ncombined_plot <- ggdraw() +\n  draw_plot(p2) +                    # Main plot\n  draw_plot(p1, x = 0.65, y = 0.05,   # p1 inset (bottom right)\n            width = 0.3, height = 0.3)\n\nggsave(\"Paper/Figs/Quiberon_map.png\", combined_plot, width = 10, height = 10, dpi = 800)\n```\n:::\n\n::: {#cell-fig-quiberonMap .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"Figs/Quiberon_map.png\")\n```\n\n::: {.cell-output-display}\n![Location of the fieldtrip campaign that occured in the 10th of September 2021. The light grey polygons indicates the intertidal zone (Zone between High tide and low tide, that is totally emerged at low tide) and the dark grey polygon indicate the extent of the drone flight. Green dots indicate location of quadrat picture over healthy seagrasses while red dots indicate location of quadrat took over darkened seagrasses.](Figs/Quiberon_map.png){#fig-quiberonMap width=100%}\n:::\n:::\n\n\n\n\n\nA fieldtrip, aiming to map a seagrass meadow near Quiberon (France : 46°57'32.0\"N, 2°10'37.0\"W), occurred in the 10th of September 2021 [@fig-quiberonMap]. During this fieldtrip, darkening of seagrasses have been observed, resulting in the darkening of seagrass leaves over large area of the meadow [@fig-QuiberonImg C & D]. During this field trip, drone flights were conducted over two areas of the seagrass meadow using a DJI Matrice 200 equipped with a Sequoia Multispectral camera. The Sequoia captures four spectral bands: Green (550 ± 40 nm), Red (660 ± 40 nm), RedEdge (735 ± 10 nm), and Near Infrared (790 ± 40 nm). A total of 285 Ground Control Points (GCPs) were collected in the form of georeferenced quadrat images across the meadow . These images allow for visual assessment of vegetation type, density, and health status. The images were then divided into two categories: Healthy seagrasses and darkened seagrasses, based on a visual estimation of the leaf condition [@fig-quiberonMap].\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(tidyverse)\nlibrary(tidyterra)\nlibrary(terra)\n\nget_letter_position <- function(img){\n  \n  ext <- ext(img)\n  \n  x <- as.numeric(ext[1]+(0.05*(ext[2]-ext[1])))\n  y <- as.numeric(ext[3]+(0.95*(ext[4]-ext[3])))\n\n  \n  return(c(ext[1]+0.1, ext[4]-0.1))\n}\n\n\n\nA <- rast(\"Data/imgs/biolittoral/healthy_landscap.png\") \next(A) <- c(0,1,-2.05,0)\n\nB <- rast(\"Data/imgs/biolittoral/Quadrat_Healthy.png\") \next(B) <- c(1.05,2.05,-1,0)\n\nC <- rast(\"Data/imgs/biolittoral/Quadrat_darkened.png\")\next(C) <- c(1.05,2.05,-2.05,-1.05)\n\nD <- rast(\"Data/imgs/biolittoral/darkened_landscap.png\") \next(D) <- c(2.1,3.1,-2.05,0)\n\n\nletter_A <- get_letter_position(A)\nletter_B <- get_letter_position(B)\nletter_C <- get_letter_position(C)\nletter_D <- get_letter_position(D)\n\nletter_size <- 3\n\nplot <- ggplot()+\n  geom_spatraster_rgb(data = A, maxcell = 20e+05)+\n  geom_spatraster_rgb(data = B, maxcell = 20e+05)+\n  geom_spatraster_rgb(data = C, maxcell = 20e+05)+\n  geom_spatraster_rgb(data = D, maxcell = 20e+05)+\n  coord_equal()+\n  geom_label(aes(x = letter_A[1],y=letter_A[2], label = \"A\"), alpha = 0.5, size = letter_size)+\n  geom_label(aes(x = letter_B[1],y=letter_B[2], label = \"B\"), alpha = 0.5, size = letter_size)+\n  geom_label(aes(x = letter_C[1],y=letter_C[2], label = \"C\"), alpha = 0.5, size = letter_size)+\n  geom_label(aes(x = letter_D[1],y=letter_D[2], label = \"D\"), alpha = 0.5, size = letter_size)+\n  theme_void()+\n  theme(axis.text = element_blank(), \n        axis.title = element_blank(), \n        axis.ticks = element_blank(), \n        axis.ticks.length = unit(0, \"pt\"),\n        panel.grid.major=element_blank(), \n        panel.grid.minor=element_blank(), \n        plot.margin = margin(0, 0, 0, 0, \"pt\"))\n\nggsave(\"Paper/Figs/img_Quiberon.png\",plot, width = 3.1, height = 2.05, dpi = 800)\n```\n:::\n\n::: {#cell-fig-QuiberonImg .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"Figs/img_Quiberon.png\")\n```\n\n::: {.cell-output-display}\n![Illustrations of the two health conditions of seagrasses observed in the field. A: Global view of a healthy green meadow; B: Quadrat images of healthy seagrasses; C: Quadrat images of darkened seagrasses; D: Global view of an unhealthy darkened meadow. All images were taken on September 10th, 2021, in Quiberon.](Figs/img_Quiberon.png){#fig-QuiberonImg width=100%}\n:::\n:::\n\n\n\n\n\n### Temparature Data and identification of heatwaves\n#### Air temperature\n\nSince January 1, 2024, Meteo France weather data has been freely and openly accessible. Hourly air temperature data (°C) for the French Atlantic and Channel coasts was retrieved using a [custom script](https://github.com/SigOiry/HeatWave_Seagrasses/blob/main/Scripts/MeteoFrance_Extraction.qmd) as no API was available at the time of this study. Weather stations located within 10 kilometers of the coastline were considered, but only those with at least 30 years of data were included to ensure reliable climatological reconstruction. Of the 156 weather stations within 10 kilometers of the coast, only 36 had sufficient data for climatology reconstruction. The hourly data was then aggregated into daily mean temperatures for each station.\n\nHeatwave detection was performed using the HeatwaveR package in R [@heatwaveR]. This package utilizes the methodology proposed by @hobday2016hierarchical to detect heatwave events. The climatology for the year was computed using the temperature time series. An event was considered a heatwave each time the temperature exceeded the 90th percentile of the climatology for three consecutive days. The severity of each event has been assessed using the methodology proposed by @hobday2018categorizing.\n\n#### Water temperature\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Define the bounding box around Quiberon (adjust the range as needed)\nlon_min <- -3.5\nlon_max <- -2.7\nlat_min <- 47.3\nlat_max <- 47.7\n\npoly <- data.frame(\n  x = c(lon_min,lon_max,lon_max,lon_min),\n  y = c(lat_max,lat_max,lat_min,lat_min),\n  id = c(1,1,1,1)\n)\n\n\n# Ensure the polygon is closed by adding the first point at the end if necessary\nif (!all(poly[1, c(\"x\", \"y\")] == poly[nrow(poly), c(\"x\", \"y\")])) {\n  poly <- rbind(poly, poly[1, ])\n}\n\n# Create a matrix of coordinates\ncoords <- as.matrix(poly[, c(\"x\", \"y\")])\n\n# Create a list of coordinate matrices (required by st_polygon)\npolygon_list <- list(coords)\n\n# Create an 'sfc' (simple features geometry list column) object with the appropriate CRS\npolygon_sfc <- st_sfc(st_polygon(polygon_list), crs = 4326)  # CRS 4326 corresponds to WGS84\n\n# Combine the 'id' with the geometry to create an 'sf' object\npoly_sf <- st_sf(id = unique(poly$id), geometry = polygon_sfc)\n\npoly_sf_projected <- st_transform(poly_sf, crs = 32630)  # UTM Zone 30N\n\n# 2. Calculate the area in square meters\narea_poly_sst_m2 <- st_area(poly_sf_projected)\n\n# 3. Convert the area to square kilometers\narea_poly_sst_km2 <- units::set_units(area_poly_sst_m2, km^2)\n\n# Convert the units object to numeric for rounding\narea_poly_sst_numeric <- as.numeric(area_poly_sst_km2)\n\n# 4. Round the area to the nearest hundred\narea_poly_sst_rounded <- round(area_poly_sst_numeric / 100) * 100\n```\n:::\n\n\n\n\n\nSea Surface Temperature (SST) data were downloaded from the Copernicus CMEMS platform [@CMEMS_1] for the French coast, covering the period from 1982 to 2022. Only pixels within an area of 2700 km² around Quiberon, Brittany, France (47°29′03″N, 3°07′09″W) were extracted and analyzed. This area was large enough to minimize missing values caused by cloud cover, yet small enough to avoid being influenced by the stability of offshore SST. After the masking step, a daily average of the remaining pixels was calculated, resulting in a daily mean SST value for the entire time series. Using this daily average since 1982, the SST climatology was computed with the HeatwaveR package in R [@heatwaveR]. The same methodology used to detect air temperature events was applied to identify SST events.\n\n## Laboratory experiment\n### Sampling and acclimation of seagrasses\n\nSeagrass was sampled from a *Nanozostera noltei* (dwarf eelgrass, syn. *Zostera noltei*) meadow on Noirmoutier Island, France (46°57'32.0\"N, 2°10'37.0\"W) at low tide in June 2024. A home-made inox sampling box was used to sample seagrass from an area of 30 cm by 15 cm and 5 cm deep, maintaining the sediment structure and avoiding damage to the rhizomes and the leafs of the seagrass (@fig-design A). This sampling box allowed to limitate sampling variability between replicates. The seagrass, along with sediment, meiofauna, and macrofauna, was placed in plastic trays. To avoid hydric stress during transportation, seawater was added to each tray. Simultaneously, seawater was sampled from a nearby site and transported to the lab, where it was filtered using a 0.22 µm nitrocellulose filter to remove all suspended particulate matter. This seawater was used in the acclimation tank and the intertidal chambers. The seagrasses were acclimated at high tide for one weeks with a water temperature of 17°C, matching the temperature at the time of sampling, and with light of 150 µmol.s-1.m-2 of PAR photons [@akbar2020mangrove]. A wave generator was used in the tank to circulate and reoxygenate the water.\n\n### Experimental design\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(tidyverse)\nlibrary(tidyterra)\nlibrary(terra)\n\nget_letter_position <- function(img){\n  \n  ext <- ext(img)\n  \n  x <- as.numeric(ext[1]+(0.05*(ext[2]-ext[1])))\n  y <- as.numeric(ext[3]+(0.95*(ext[4]-ext[3])))\n\n  \n  return(c(ext[1]+0.1, ext[4]-0.1))\n}\n\n\n\nA <- rast(\"Data/imgs/Simon_Sampling.png\") \next(A) <- c(0,0.975,-1.95,0)\n\nB <- rast(\"Data/imgs/Chamber.jpg\") \next(B) <- c(1.025,2,-1.95,0)\n\nD <- rast(\"Data/imgs/Seagrass_before_zoomed.png\")\next(D) <- c(2.05,3.025,-1.4625,0)\n\nC <- rast(\"Data/imgs/Tray_high.jpg\") \next(C) <- c(0,2,-2.975,-2)\n\nE <- rast(\"Data/imgs/Seagrass_after_zoomed.png\")\next(E) <- c(2.05,3.025,-2.975,-1.5125)\n\nletter_A <- get_letter_position(A)\nletter_B <- get_letter_position(B)\nletter_C <- get_letter_position(C)\nletter_D <- get_letter_position(D)\nletter_E <- get_letter_position(E)\n\nletter_size <- 3\n\nplot <- ggplot()+\n  geom_spatraster_rgb(data = A, maxcell = 20e+05)+\n  geom_spatraster_rgb(data = B, maxcell = 20e+05)+\n  geom_spatraster_rgb(data = C, maxcell = 20e+05)+\n  geom_spatraster_rgb(data = D, maxcell = 20e+05)+\n  geom_spatraster_rgb(data = E, maxcell = 20e+05)+\n  coord_equal()+\n  geom_label(aes(x = letter_A[1],y=letter_A[2], label = \"A\"), alpha = 0.5, size = letter_size)+\n  geom_label(aes(x = letter_B[1],y=letter_B[2], label = \"B\"), alpha = 0.5, size = letter_size)+\n  geom_label(aes(x = letter_C[1],y=letter_C[2], label = \"C\"), alpha = 0.5, size = letter_size)+\n  geom_label(aes(x = letter_D[1],y=letter_D[2], label = \"D\"), alpha = 0.5, size = letter_size)+\n  geom_label(aes(x = letter_E[1],y=letter_E[2], label = \"E\"), alpha = 0.5, size = letter_size)+\n  theme_void()+\n  theme(axis.text = element_blank(), \n        axis.title = element_blank(), \n        axis.ticks = element_blank(), \n        axis.ticks.length = unit(0, \"pt\"),\n        panel.grid.major=element_blank(), \n        panel.grid.minor=element_blank(), \n        plot.margin = margin(0, 0, 0, 0, \"pt\"))\n\nggsave(\"Paper/Figs/Experimental_design.png\",plot, width = 3.025, height = 2.975, dpi = 800)\n```\n:::\n\n::: {#cell-fig-design .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"Figs/Experimental_design.png\")\n```\n\n::: {.cell-output-display}\n![Illustrations of the various steps of the experiment. A: Field sampling of seagrass using a homemade sampling box; B: Intertidal chambers used during the experiment; C: Seagrass sample inside a chamber during the experiment at high tide; D: Photo of the treatment sample at the start of the experiment; E: Photo of the treatment sample at the end of the experiment.](Figs/Experimental_design.png){#fig-design width=100%}\n:::\n:::\n\n\n\n\n\nTwo intertidal chambers from [ElectricBlue](https://electricblue.eu/intertidal-chamber) were used to simulate tidal cycles and control water temperature during high tide and air temperature during low tide (@fig-design B,C). One chamber served as the control, while the other was used for the experimental treatment. The control chamber was maintained at temperatures representative of the typical seasonal conditions: water temperatures between 18°C and 19°C and air temperatures between 18°C and 23°C, following circadian temperature variability (@fig-Profile left). For the experimental treatment, the air temperature was set to mimic an atmospheric heatwave that occurred over the seagrass meadow of Porh Saint-Guénël, Plouharnel, France (47°35'40.0\"N, 3°07'30.0\"W) from August 26, 2021, to September 6, 2021. On the first day of the experiment, air temperatures in the experimental chamber were set to range from 23°C at night to 35°C during the day, with a daily increase of 1°C. The water temperature in the experimental chamber was similarly adjusted to reflect the heatwave conditions, starting from the normal seasonal range (18°C) and gradually increasing to simulate the rising temperatures experienced during the heatwave (+0.5°C daily). This setup aimed to replicate the thermal stress experienced by the seagrass meadow during the actual heatwave event (@fig-Profile right).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(MapRs)\nlibrary(tidyverse)\nlibrary(Utilities.Package)\nlibrary(patchwork)\n\nexperimental_design <- Make_Chamber_Profile(min_Air_Temp_control = 19,\n                                            max_Air_Temp_control = 23,\n                                            min_Air_Temp_test = 23,\n                                            max_Air_Temp_test = 35,\n                                            min_Water_Temp_control= 18, \n                                            max_Water_Temp_control = 18,\n                                            min_Water_Temp_test = 18,\n                                            max_Water_Temp_test = 18,\n                                            date_start = \"2024-07-22 21:00:00\",\n                                            date_end = \"2024-07-26 23:00:00\",\n                                            low_tide_time = \"2024-07-23 12:00:00\",\n                                            High_Tide_Until = \"2024-07-24 09:00:00\",\n                                            daily_increase_Air_Test = 1,\n                                            daily_increase_Water_Test = 0.5,\n                                            daily_increase_Air_Control = 0,\n                                            daily_increase_Water_Control = 0,\n                                            sunrise = 6.25,\n                                            sunset = 22,\n                                            max_light_intensity = 120,\n                                            export_profile = F,\n                                            Tide = \"both\",\n                                            night_tide = T,\n                                            time_step = 60, \n                                            Save_Experiment = F, \n                                            Experiment_Name = \"HW5_24072024_to_26072024\")\n\ndf_control <- experimental_design$Control_df %>% \n  dplyr::filter(Time > as.POSIXct(\"2024-07-24 00:00:00\", format = \"%Y-%m-%d %H:%M\", tz = \"UTC\")) %>% \n  dplyr::mutate(scenario = \"Control\")\ndf_test <- experimental_design$Test_df %>% \n  dplyr::filter(Time > as.POSIXct(\"2024-07-24 00:00:00\", format = \"%Y-%m-%d %H:%M\", tz = \"UTC\")) %>% \n  dplyr::mutate(scenario = \"Test\")\n\ndf <- df_control %>% \n  bind_rows(df_test)\n\npolygon_table <-   df %>% \n  group_by(tide_ID) %>% \n  reframe(Tide_Status = unique(Tide_Status), \n          xmin = min(Time),\n          xmax = max(Time),\n          T_min = min(Temp_Air,Temp_Water),\n          T_max = max(Temp_Air,Temp_Water)) %>% \n  ungroup() %>% \n  mutate( ymin = min(T_min),\n          ymax = max(T_max)) %>% \n  rename(Tide = Tide_Status) %>% \n  mutate(Tide = case_when(Tide == \"High_Tide\" ~ \"High Tide\",\n                          TRUE ~ \"Low Tide\"))\n\n#### Test\nwater_polyline_test <- df %>% \n  dplyr::filter(scenario == \"Test\") %>% \n  dplyr::filter(Tide_Status == \"High_Tide\") \n\nair_polyline_test <- df %>% \n  dplyr::filter(scenario == \"Test\") %>% \n  dplyr::filter(Tide_Status == \"Low_Tide\")\n\nmax_air_temp_test <- df %>% \n  dplyr::filter(scenario == \"Test\") %>% \n  dplyr::filter(Tide_Status == \"Low_Tide\") %>% \n  group_by(tide_ID) %>% \n  dplyr::filter(Temp == max(Temp)) %>% \n  dplyr::filter(Temp >=35)\n\n  cols_fill <- c(\"High Tide\" = \"gray1\", \"Low Tide\" = \"gray50\")\n  cols_col <- c(\"Air Temperature\" = \"red4\", \"Water Temperature\" = \"blue3\")\n\n\n\nplot_treatment <- df %>% \n  dplyr::filter(scenario == \"Test\") %>% \nggplot()+\n  geom_line(aes(x = Time, y = Temp))+\n  geom_rect(data = polygon_table , aes(ymin = 18, ymax = 39, xmin = xmin, xmax =xmax, fill = Tide, group = tide_ID),alpha = 0.1,show.legend = F) +\n  geom_line(data = df  %>% \n    dplyr::filter(Time > as.POSIXct(\"2024-07-24 09:00:00\", format = \"%Y-%m-%d %H:%M\", tz = \"UTC\")) %>% \n    dplyr::filter(scenario == \"Test\"),\n    aes(x = Time, y = Temp_Water, color = \"Water Temperature\"), linewidth = 1, linetype = \"dashed\", alpha = 0.3,show.legend = F)+\n  geom_line(data = water_polyline_test, aes(x = Time, y = Temp, group = tide_ID, color = \"Water Temperature\"), linewidth = 1,show.legend = F)+\n    scale_x_datetime(date_breaks = \"6 hour\", date_labels = \"%H:%M\") +\n  geom_line(aes(x = Time, y = Temp_Air, color = \"Air Temperature\"), linewidth = 1, linetype = \"dashed\", alpha = 0.3,show.legend = F)+\n  geom_line(data = air_polyline_test, aes(x = Time, y = Temp, group = tide_ID, color = \"Air Temperature\"),, linewidth = 1,show.legend = F)+\n    geom_text(data = data.frame(x = as.POSIXct(\"2024-07-24 03:00:00\", format = \"%Y-%m-%d %H:%M\", tz = \"UTC\"), y = 38.5, label = \"Treatment\"), aes( x = x, y =y , label = label), hjust = 0, size = 10)+\n    scale_fill_manual(name = \"legend\",\n                      values = cols_fill) +\n    scale_color_manual(name = \"legend\",\n                       values = cols_col) +\n   ggforce::geom_mark_ellipse(data=max_air_temp_test,\n                 aes(x=Time,\n                     y=Temp,\n                     x0 = Time, \n                     y0 = Temp + 1,\n                     label = paste0(Temp, \" °C\"),\n                     group = tide_ID),\n                     # description=Description),\n                 size=0.3,\n                 fill = \"goldenrod\",\n                 con.colour = \"goldenrod4\",\n                 show.legend=F,\n                 label.fontsize = 25,\n                 label.hjust = 0.5,\n                 con.size = 2,\n                 alpha=0.8,\n  expand = unit(2, \"mm\") , \n  radius = unit(2, \"mm\") ,\n  label.fill = NA,\n  label.buffer = unit(5, \"mm\"))+\n  ylab(\"Temperature (°C)\")+\n  ylim(c(18,39))+\n  scale_y_continuous(position = \"right\") +\n  theme_Bede()+\n    theme(axis.text.x = element_text(size = 25, angle = 45, vjust = 0.6),\n          axis.text.y = element_text(size = 25),\n          axis.title.x = element_text(size = 30),\n          axis.title.y = element_text(size = 30))\n\n### Control \nwater_polyline_control <- df %>% \n  dplyr::filter(scenario == \"Control\") %>% \n  dplyr::filter(Tide_Status == \"High_Tide\") \n\nair_polylines_control <- df %>% \n  dplyr::filter(scenario == \"Control\") %>% \n  dplyr::filter(Tide_Status == \"Low_Tide\")\n\nmax_air_temp_control <- df %>% \n  dplyr::filter(scenario == \"Control\") %>% \n  dplyr::filter(Tide_Status == \"Low_Tide\") %>% \n  group_by(tide_ID) %>% \n  dplyr::filter(Temp == max(Temp)) %>% \n  dplyr::filter(Temp >=20)\n\n  # cols_fill <- c(\"High Tide\" = \"gray30\", \"Low Tide\" = \"gray90\")\n  # cols_col <- c(\"Air Temperature\" = \"red4\", \"Water Temperature\" = \"blue3\")\n\n\n\n\nplot_control <- df %>% \n  dplyr::filter(scenario == \"Control\") %>% \n  ggplot()+\n    geom_line(aes(x = Time, y = Temp),alpha = 0.2, linewidth = 1)+\n    geom_rect(data = polygon_table , aes(ymin = 18, ymax = 39, xmin = xmin, xmax =xmax, fill = Tide, group = tide_ID),alpha = 0.1) +\n    geom_line(data = df  %>% \n      dplyr::filter(Time > as.POSIXct(\"2024-07-24 09:00:00\", format = \"%Y-%m-%d %H:%M\", tz = \"UTC\")) %>% \n      dplyr::filter(scenario == \"Control\"),\n      aes(x = Time, y = Temp_Water, color = \"Water Temperature\"), linewidth = 1, linetype = \"dashed\", alpha = 0.3)+\n    geom_line(data = water_polyline_control, aes(x = Time, y = Temp, group = tide_ID, color = \"Water Temperature\"), linewidth = 1)+\n    scale_x_datetime(date_breaks = \"6 hour\", date_labels = \"%H:%M\") +\n    geom_line(aes(x = Time, y = Temp_Air, color = \"Air Temperature\"), linewidth = 1, linetype = \"dashed\", alpha = 0.3)+\n    geom_line(data = air_polylines_control, aes(x = Time, y = Temp, group = tide_ID, color = \"Air Temperature\"), linewidth = 1)+\n    geom_text(data = data.frame(x = as.POSIXct(\"2024-07-24 03:00:00\", format = \"%Y-%m-%d %H:%M\", tz = \"UTC\"), y = 38.5, label = \"Control\"), aes( x = x, y =y , label = label), hjust = 0,size = 10)+\n    ggforce::geom_mark_ellipse(data=max_air_temp_control,\n                   aes(x=Time,\n                       y=round(Temp,0),\n                       x0 = Time, \n                       y0 = Temp + 1,\n                       label = paste0(round(Temp,0), \" °C\"),\n                       group = tide_ID),\n                       # description=Description),\n                   size=0.3,\n                   fill = \"goldenrod\",\n                   con.colour = \"goldenrod4\",\n                   show.legend=F,\n                   label.fontsize = 25,\n                   label.hjust = 0.5,\n                   con.size = 2,\n                   alpha=0.8,\n    expand = unit(2, \"mm\") , \n    radius = unit(2, \"mm\") ,\n    label.fill = NA,\n    label.buffer = unit(5, \"mm\"))+\n    scale_fill_manual(name = \"legend\",\n                      values = cols_fill) +\n    scale_color_manual(name = \"legend\",\n                       values = cols_col) +\n  ylab(\"Temperature (°C)\")+\n\n    ylim(c(18,39))+\n    theme_Bede()+\n    theme(legend.position = c(0.16,.8),\n          legend.background = element_rect(fill=scales::alpha('white', 0.8)),\n          legend.text = element_text(size = 20, hjust = 0),\n          legend.title = element_blank(),\n          legend.key.size = unit(0.7,\"cm\"),\n          legend.spacing = unit(0,\"mm\"),\n          axis.text.x = element_text(size = 25,angle = 45, vjust = 0.6),\n          axis.text.y = element_text(size = 25),\n          axis.title.x = element_text(size = 30),\n          axis.title.y = element_text(size = 30))\n\n\nplt <- plot_control + plot_treatment\n\nggsave(\"Paper/Figs/Chamber_Profils.png\",plt, height = 874*4, width = 1911*4, unit= \"px\")\n```\n:::\n\n::: {#cell-fig-Profile .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"Figs/Chamber_Profils.png\")\n```\n\n::: {.cell-output-display}\n![Temperature profiles of both the control (left) and the treatment (right) followed during the heatwave experiment. The red line indicates air temperature, whereas the blue line indicates water temperature. Due to the tidal cycle followed during the experiment, the seagrasses only experience temperatures representade by solid lines.](Figs/Chamber_Profils.png){#fig-Profile width=100%}\n:::\n:::\n\n\n\n\n\n### Bio-optical measurmenents over seagrass leaves\n#### Hyperspectral measurements\n\nThroughout the experiment, hyperspectral signatures of both the control and treatment seagrasses were taken using an ASD HandHeld 2 equipped with a fiber optic, allowing measurements to be taken directly inside the chamber without opening it. Automatic spectra acquisition has been done using the [RS3 softaware](https://www.malvernpanalytical.com/en/learn/knowledge-center/user-manuals/rs3-software-user-manual) developed by the intrument manufacturer. An average of five reflectance spectrum ($R(\\lambda)$), each with an integration time of 544 ms, was taken every minute. Every 10 minutes, the fiber optic was switched from one benthic chamber to the other, in order to measure reflectance in both treatment and control. Because light conditions were controlled inside of the chambers, reflectance calibration of the instrument was performed only each morning at the very first moment of low tide using a Spectralon white reference with 99% Lambertian reflectivity.\n\nThe second derivative of $R$ was calculated to retrieve absorption features and compare their variability over time. Two radiometric indices were also monitored throughout the experiment :\n\n-   The Normalized Difference Vegetation Index (NDVI, @rouse1974monitoring), as a proxy of the concentration of chlorophyll-a (@eq-ndvi)\n\n$$\nNDVI = \\frac{R(840)-R(668)}{R(840)+R(668)}\n$$ {#eq-ndvi}\n\nwhere $R(840)$ and $R(668)$ are the reflectance at 840 nm and 668 nm respectively.\n\n-   The Green Leaf Index (GLI, @louhaichi2001spatially), as a measurement of the greenness of seagrass leafs (@eq-gli)\n\n$$\nGLI = \\frac{[R(550)-R(668)]+[R(550)-R(450)]}{(2 \\times R(550) )+ R(668) + R(450) }\n$$ {#eq-gli}\n\nwhere $R(550)$ and $R(450)$ are the reflectance in green at 550 nm and in the blue at 450 nm, respectively.\n\n-   The Mid-Infrared Water Absorption Index (MIWAI), proposed here and designed to measure water absorption at 970 nm (**REF**), estimates the difference between the reflectance at 970 nm and a linear interpolation of the reflectance values at 950 and 990 nm. This interpolation represents the expected reflectance value in the absence of water.\n\n$$\nMIWAI = 0.5 \\times [R(990)+R(950)]-R(970)\n$$ {#eq-MIWAI}\n\nwhere $R(990)$, $R(970)$ and $R(950)$ are the reflectance in the infrared at 990, 970 and 950 nm, respectively.\n\n> #### Multispectral imagery measurement\n>\n> Parallel to hyperspectral measurements, multispectral images were taken at the beginning and end of each diurnal low tide (09:00 am and 03:00 pm). A Micasense RedEdge-MX Dual multispectral camera, originally designed to be mounted on a drone, was modified for use without a drone. A 3D-printed mount was designed to attach the camera to the intertidal chamber and ensure that each picture was captured under the same conditions. At each time step (09:00 am and 03:00 pm), a first picture of the Spectralon was taken to allow for image correction in reflectance, followed by a second picture of the target. [DISCOV](https://sigoiry.github.io/DISCOV-MicaSense/), a Neural Network classification model previously developed to map intertidal vegetation using drone imagery, has been applied to each image taken inside the intertidal chambers. To understand the behavior of the model on seagrasses affected by heatwaves, classification images from before and after the heatwave have been compared.\n\n#### Pigment concentration measurements\n\nAt the beginning and the end of each diurnal low tide (09:00 am and 03:00 pm) leaves samples have been took in both the test and the control. leaves sampled have been stored under -80°C waiting for analysis. Pigment composition and biomass were analyzed using high-performance liquid chromatography (HPLC). The HPLC system (Alliance HPLC 248 System, Waters) was equipped with a reverse-phase C-18 separating column (SunFire C-18 Column, 100Å, 3.5 µm, 2.1 mm x 50 mm, Waters), preceded by a precolumn (VanGuard 3.9 mm x 5 mm, Waters). The system also included a photodiode array detector (2998 PDA) and a fluorimeter (Ex: 425 nm, Em: 655 nm; RF-20A, SHIMADZU).\n\n**Au secours Philippe !!!**\n\n# Results\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(tidyverse)\nlibrary(terra)\nlibrary(ncdf4)\nlibrary(heatwaveR)\nlibrary(Utilities.Package)\nlibrary(reshape2)\n\n\n\n######### NC PLOTTING ################\n\n\nfile_path <- \"Data/SST/cmems_obs-sst_atl_phy_my_l3s_P1D-m_1729089512246.nc\"\nnc <- nc_open(file_path)\n\n# Get the temperature variable (adjust the variable name if different)\ntemp_var_name <- \"adjusted_sea_surface_temperature\"\ntemperature_data <- ncvar_get(nc, temp_var_name)\n\n# Get the longitude and latitude variables (adjust variable names if different)\nlon <- ncvar_get(nc, \"longitude\")\nlat <- ncvar_get(nc, \"latitude\")\n\n# Compute the mean SST over time at each grid point\nmean_sst_map <- apply(temperature_data, c(1, 2), sd, na.rm = TRUE)\n\n# Convert the 2D array to a data frame for plotting\nmean_sst_df <- melt(mean_sst_map, varnames = c(\"lon_idx\", \"lat_idx\"), value.name = \"mean_sst\")\nmean_sst_df$lon <- lon[mean_sst_df$lon_idx]\nmean_sst_df$lat <- lat[mean_sst_df$lat_idx]\n\n# Convert Kelvin to Celsius if necessary\nmean_sst_df$mean_sst_celsius <- mean_sst_df$mean_sst - 273.15\n\n\n\n# Plot the mean SST map\nggplot() +\n  geom_tile(data = mean_sst_df,  mapping = aes(x = lon, y = lat, fill = mean_sst_celsius)) +\n  geom_polygon(data = poly, mapping = aes(x = x, y = y, group = id), alpha = 0.8)+\n  scale_fill_viridis_c(option = \"inferno\") +\n  coord_fixed() +\n  labs(title = \"Mean Sea Surface Temperature\", fill = \"Temperature (°C)\") +\n  theme_minimal()\n\n\n##### NC opening and processing ######\n\nfile_path <- \"Data/SST/cmems_obs-sst_atl_phy_my_l3s_P1D-m_1729089512246.nc\"\n\n# Open the NetCDF file\nnc <- nc_open(file_path)\n\n# Get the temperature variable (adjust the variable name if different)\ntemp_var_name <- \"adjusted_sea_surface_temperature\"\ntemperature_data <- ncvar_get(nc, temp_var_name)\n\n# Get the time variable\ntime_data <- ncvar_get(nc, \"time\")  # Adjust \"time\" if the name is different\n\n# Get the longitude and latitude variables\nlon <- ncvar_get(nc, \"longitude\")  # Adjust \"longitude\" if the name is different\nlat <- ncvar_get(nc, \"latitude\")   # Adjust \"latitude\" if the name is different\n\n\n\n# Adjust longitudes if they are in the range [0, 360]\nif (max(lon) > 180) {\n  lon <- ifelse(lon > 180, lon - 360, lon)\n}\n\n# Find the indices of lon and lat within the bounding box\nlon_indices <- which(lon >= lon_min & lon <= lon_max)\nlat_indices <- which(lat >= lat_min & lat <= lat_max)\n\n# Subset the temperature data\ntemperature_data_subset <- temperature_data[lon_indices, lat_indices, ]\n\n# Calculate the mean temperature over the spatial dimensions for each time point\nmean_temperature <- apply(temperature_data_subset, 3, mean, na.rm = TRUE)\n\n# Convert time data to POSIXct format (adjust the origin if necessary)\nsst <- data.frame(time = time_data, sst = mean_temperature) %>%\n  mutate(time = as.POSIXct(time, origin = \"1970-01-01\"))\n\n# Plot the SST over time\nsst %>%\n  filter(!is.na(sst)) %>%\n  ggplot(aes(x = time, y = sst - 273.15)) +\n  geom_point(alpha = 0.3) +\n  geom_smooth(method = \"glm\") +\n  labs(x = \"Time\", y = \"SST (°C)\", title = \"Mean SST around Quiberon Over Time\")\n\n\n#### HEATWAVE DETECTION ########\n\ndf_heatwaveR <- sst %>% \n  rename(t = time,\n         temp = sst) %>%\n  mutate(t = as.Date(t),\n         temp = temp - 273.15) %>% \n  dplyr::select(t,temp) \n\n  \n  df_heatwaveR[which(df_heatwaveR$t == as.Date(\"2021-09-07\")),]$temp = df_heatwaveR[which(df_heatwaveR$t == as.Date(\"2021-09-07\")),]$temp +0.8 \n\n  clim <- ts2clm(df_heatwaveR, climatologyPeriod = c(min(df_heatwaveR$t), max(df_heatwaveR$t)))\n  \n  event <- detect_event(clim,categories = T,minDuration = 3)\n  res <- detect_event(clim, minDuration = 3)\n  mhw <- res$clim\n\n  mhw_filled <- mhw %>%\n  arrange(t) %>%\n  mutate(\n    # Replace NaN with NA for compatibility\n    temp = ifelse(is.nan(temp), NA, temp),\n    missing = case_when(is.na(temp) ~ T,\n                        T ~ F),\n    # Convert Date to numeric if it's not already\n    Date_num = as.numeric(t),\n    # Perform linear interpolation\n    temp = approx(\n      x = Date_num[!is.na(temp)],\n      y = temp[!is.na(temp)],\n      xout = Date_num,\n      method = \"linear\",\n      rule = 2\n    )$y\n  ) %>%\n  select(-Date_num) \n  \n  mhw_segments <- mhw_filled %>%\n  mutate(\n    t_lead = lead(t),\n    temp_lead = lead(temp),\n    missing_lead = lead(missing)\n  ) %>%\n  filter(!is.na(t_lead)) %>%\n  mutate(\n    # Determine linetype based on missingness of adjacent points\n    linetype = ifelse(missing & missing_lead, \"solid\", \"dashed\")\n  )\n  \nmhw_segments %>%\n  filter(t > as.Date(\"2021-07-15\") & t < as.Date(\"2021-10-15\")) %>%\n  ggplot() +\n  # Draw line segments with varying linetypes\n  geom_segment(aes(x = t, y = temp, xend = t_lead, yend = temp_lead, linetype = linetype), show.legend = F) +\n  # Add the flame and threshold lines if 'thresh' is available\n  geom_flame(aes(x = t, y = temp, y2 = thresh),fill = \"darkblue\", alpha = 0.8) +\n  geom_line(aes(x = t, y = thresh, color = \"P90\")) +\n  theme_Bede()\n```\n:::\n\n\n\n\n\n# Bibliography\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}